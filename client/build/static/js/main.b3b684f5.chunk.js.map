{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Header/Header.js","components/Searchbar/Searchbar.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Header","class","API_URL","Searchbar","state","query","results","handleInputChange","setState","search","value","getInfo","axios","get","then","res","books","data","items","handleSubmit","e","preventDefault","console","log","onSubmit","this","placeholder","ref","input","onChange","type","onClick","map","book","volumeInfo","title","authors","description","href","infoLink","src","imageLinks","smallThumbnail","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PAUeA,MAPf,SAAiBC,GACb,OACI,yBAAKC,UAAU,aACVD,EAAME,WCSJC,MAbf,WACI,OACA,yBAAKF,UAAU,aACX,wBAAIA,UAAU,aAAd,wBACA,uBAAGA,UAAU,QAAb,yDACA,wBAAIA,UAAU,SACd,wDACA,4BAAQG,MAAM,kBAAd,qB,wDCPFC,EAAU,iDA+DDC,E,2MA7DbC,MAAQ,CACNC,MAAO,GACPC,QAAS,I,EAGXC,kBAAoB,WAClB,EAAKC,SAAS,CACZH,MAAO,EAAKI,OAAOC,S,EAGvBC,QAAU,WACRC,IAAMC,IAAN,UAAaX,GAAb,OAAuB,EAAKE,MAAMC,QAASS,MAAK,SAAAC,GAC9C,IAAMC,EAAQD,EAAIE,KAAKC,MACvB,EAAKV,SAAS,CAAEF,QAASU,Q,EAY7BG,aAAe,SAAAC,GACbA,EAAEC,kB,mFAViB,IAAD,OAClBT,IACGC,IAAI,gEACJC,MAAK,SAAAC,GACJO,QAAQC,IAAIR,EAAIE,KAAKC,OACrB,IAAMF,EAAQD,EAAIE,KAAKC,MACvB,EAAKV,SAAS,CAAEF,QAASU,S,+BAOrB,IAAD,OACP,OACE,0BAAMQ,SAAUC,KAAKN,cACnB,2BACEO,YAAY,qBACZC,IAAK,SAAAC,GAAK,OAAK,EAAKnB,OAASmB,GAC7BC,SAAUJ,KAAKlB,oBAEjB,2BAAIkB,KAAKrB,MAAMC,OACf,4BAAQyB,KAAK,SAAShC,UAAU,kBAAkBiC,QAASN,KAAKd,SAAhE,UACA,wBAAIkB,SAAUJ,KAAKd,SAChBc,KAAKrB,MAAME,QAAQ0B,KAAI,SAAAC,GAAI,OAC1B,6BACE,sCAAYA,EAAKC,WAAWC,OAAY,IACxC,4BAAQL,KAAK,SAAShC,UAAU,mBAAhC,cAGA,0CAAgBmC,EAAKC,WAAWE,QAAQ,IACxC,2CAAiBH,EAAKC,WAAWG,aACjC,uBAAGC,KAAML,EAAKC,WAAWK,UAAzB,4CAGA,6BACA,yBAAKC,IAAKP,EAAKC,WAAWO,WAAWC,2B,GArD3BC,IAAMC,WCYfC,MATf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.b3b684f5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction Wrapper(props) {\r\n    return(\r\n        <div className=\"container\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nfunction Header () {\r\n    return(\r\n    <div className=\"jumbotron\">\r\n        <h1 className=\"display-4\">Google Books Search!</h1>\r\n        <p className=\"lead\">Search for a book using the Google Books search API!.</p>\r\n        <hr className=\"my-4\"></hr>\r\n        <p>It's fun and easy to use!</p>\r\n        <button class=\"btn btn-danger\">See Saved Books</button>\r\n\r\n      \r\n    </div>\r\n    )\r\n}\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nconst API_URL = \"https://www.googleapis.com/books/v1/volumes?q=\";\r\nclass Searchbar extends React.Component {\r\n  state = {\r\n    query: \"\",\r\n    results: []\r\n  };\r\n\r\n  handleInputChange = () => {\r\n    this.setState({\r\n      query: this.search.value\r\n    });\r\n  };\r\n  getInfo = () => {\r\n    axios.get(`${API_URL}${this.state.query}`).then(res => {\r\n      const books = res.data.items;\r\n      this.setState({ results: books });\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://www.googleapis.com/books/v1/volumes?q=Harry%20Potter\")\r\n      .then(res => {\r\n        console.log(res.data.items);\r\n        const books = res.data.items;\r\n        this.setState({ results: books });\r\n      });\r\n  }\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          placeholder=\"Search for a book!\"\r\n          ref={input => (this.search = input)}\r\n          onChange={this.handleInputChange}\r\n        />\r\n        <p>{this.state.query}</p>\r\n        <button type=\"button\" className=\"btn btn-primary\" onClick={this.getInfo}>Search</button>\r\n        <ul onChange={this.getInfo}>\r\n          {this.state.results.map(book => (\r\n            <div>\r\n              <li>Title: {book.volumeInfo.title}</li>{\" \"}\r\n              <button type=\"button\" className=\"btn btn-primary\">\r\n                Save Book!\r\n              </button>\r\n              <p>Author('s): {book.volumeInfo.authors[0]}</p>\r\n              <p>Description: {book.volumeInfo.description}</p>\r\n              <a href={book.volumeInfo.infoLink}>\r\n                Check this book out on the google store!\r\n              </a>\r\n              <br></br>\r\n              <img src={book.volumeInfo.imageLinks.smallThumbnail}></img>\r\n            </div>\r\n          ))}\r\n        </ul>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Searchbar;\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Wrapper from \"./components/Wrapper/Wrapper\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Searchbar from \"./components/Searchbar/Searchbar\"\r\nfunction App() {\r\n  return (\r\n    <Wrapper>\r\n      <Header />\r\n      <Searchbar />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}